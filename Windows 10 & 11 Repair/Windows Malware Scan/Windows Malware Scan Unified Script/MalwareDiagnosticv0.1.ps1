<#
.SYNOPSIS
    A PowerShell script with a graphical interface to run Windows Defender scans and provide real-time status updates.

.DESCRIPTION
    This PowerShell script provides an interactive UI that allows users to perform Windows Defender scans, either Quick or Full, on their system. The interface includes buttons to start scans, a progress bar to display the status of the scan, and a status text to indicate the progress of the scan process.

    The script checks if it's running with administrator privileges and prompts the user for elevation if necessary. Once elevated, the script interacts with Windows Defender to run the scan types and provides feedback via a WPF-based window with progress updates. It displays completion messages using message boxes and offers error handling in case the scan process encounters issues.

    The following buttons are available in the interface:
    - **Run Windows Defender Quick Scan**: Initiates a quick scan using Windows Defender.
    - **Run Windows Defender Full Scan**: Initiates a full system scan using Windows Defender.
    
    The script is intended to be easy to use for both beginners and advanced users who need a quick tool for running Windows Defender scans without the need to manually interact with system settings.

.NOTES
    Author       : Allester Padovani
    Date         : July 16, 2025
    Version      : 0.1
    Tested On    : Windows 11 24H2
    Requirements :
        - Administrator rights to interact with the Windows Defender service and run scans.
        - .NET Framework (for WPF and Windows Forms integration).
        - PowerShell 7+ or newer to support the required cmdlets and graphical features.

    Compatibility: Windows 10, 11 and above  
    This script is useful for IT professionals, system administrators, or advanced users who prefer a graphical interface for running Windows Defender scans. It can be customized or extended to add more features or support additional security tools in the future.
#>

# Check if running as admin; if not, restart as admin
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
{
    $psi = New-Object System.Diagnostics.ProcessStartInfo
    $psi.FileName = powershell.exe
    $psi.Arguments = "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`""
    $psi.Verb = "runas"
    try {
        [System.Diagnostics.Process]::Start($psi) | Out-Null
    } catch {
        [System.Windows.Forms.MessageBox]::Show("This tool requires administrator privileges to run.","Elevation Required",[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Warning)
    }
    exit
}

Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName System.Windows.Forms

$xaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Malware Diagnostic &amp; Cleanup Tool v0.1"
        Height="320" Width="460"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen"
        Background="#f4f4f4"
        FontFamily="Segoe UI"
        FontSize="12"
        SizeToContent="WidthAndHeight">
    <Window.Resources>
        <Style TargetType="Button">
            <Setter Property="Background" Value="#f4f4f4"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderBrush" Value="#cccccc"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Width" Value="400"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Margin" Value="0,0,0,10"/>
        </Style>
    </Window.Resources>
    <StackPanel Margin="20" HorizontalAlignment="Center">
        <TextBlock Text="Malware Diagnostic &amp; Cleanup Tool v0.1" FontSize="16" FontWeight="Bold" Margin="0,0,0,20"
                   HorizontalAlignment="Center"/>
        <Button x:Name="RunWinDefenderScanButton" Content="Run Windows Defender Quick Scan"/>
        <Button x:Name="RunWinDefenderFullScanButton" Content="Run Windows Defender Full Scan"/>
        <ProgressBar x:Name="ProgressBar" Height="20" Width="400" Minimum="0" Maximum="100" Margin="0,5,0,5" Value="0"/>
        <TextBlock x:Name="StatusText" Text="Ready." FontSize="12" Foreground="black"/>
        <TextBlock Text=" Allester Padovani, Senior IT Specialist. All rights reserved." FontSize="12" FontStyle="Italic" Foreground="black" Margin="0,20,0,0" HorizontalAlignment="Center"/>
    </StackPanel>
</Window>
"@

$xmlReader = [System.Xml.XmlReader]::Create([System.IO.StringReader]::new($xaml))
$window = [Windows.Markup.XamlReader]::Load($xmlReader)

$runWinDefenderScanButton = $window.FindName("RunWinDefenderScanButton")
$runWinDefenderFullScanButton = $window.FindName("RunWinDefenderFullScanButton")
$progressBar = $window.FindName("ProgressBar")
$statusText = $window.FindName("StatusText")

function Run-DefenderScan($scanType, $button) {
    try {
        $button.IsEnabled = $false
        $statusText.Text = "Checking Windows Defender service..."
        $progressBar.Value = 10

        $service = Get-Service -Name WinDefend -ErrorAction Stop
        if ($service.Status -ne 'Running') {
            Start-Service -Name WinDefend
            Start-Sleep -Seconds 2
        }

        $statusText.Text = "Running Windows Defender $scanType Scan..."
        $progressBar.Value = 50

        Start-MpScan -ScanType $scanType

        $progressBar.Value = 100
        $statusText.Text = "Windows Defender $scanType Scan completed."

        [System.Windows.Forms.MessageBox]::Show("Windows Defender $scanType Scan completed.","Scan Complete",[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information)
    }
    catch {
        $statusText.Text = "Error: $_"
        [System.Windows.Forms.MessageBox]::Show("Error occurred:`n$_","Scan Error",[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Error)
    }
    finally {
        $button.IsEnabled = $true
    }
}

$runWinDefenderScanButton.Add_Click({
    Run-DefenderScan -scanType "Quick" -button $runWinDefenderScanButton
})

$runWinDefenderFullScanButton.Add_Click({
    Run-DefenderScan -scanType "Full" -button $runWinDefenderFullScanButton
})

$window.ShowDialog() | Out-Null
