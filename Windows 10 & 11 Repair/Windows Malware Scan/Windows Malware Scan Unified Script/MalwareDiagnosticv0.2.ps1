<#
.SYNOPSIS
    Provides a graphical interface to perform common antivirus and system scan actions on a Windows computer.

.DESCRIPTION
    This PowerShell script offers a user-friendly interface built using WPF (Windows Presentation Foundation) to interact with Windows Defender and other system tools.
    It allows users to perform various actions such as starting a quick scan, running a full scan, checking system scan status, updating antivirus definitions, and clearing scan history.
    
    The script features several buttons that trigger actions:
    - **Start Quick Scan**: Initiates a quick scan using Windows Defender.
    - **Get Scan Status**: Displays the current status of Windows Defender, including threat detection and scan times.
    - **Open Windows Security**: Opens the Windows Security application for manual inspection.
    - **Update Definitions**: Updates Windows Defender’s virus definitions to the latest version.
    - **Run Full Scan**: Initiates a full scan of the system for potential threats.
    - **Clear Scan History**: Clears the scan history to free up space or remove old records.

    The interface also includes a progress bar and status text to keep the user informed about the ongoing processes.

.NOTES
    Author       : Allester Padovani
    Date         : July 16, 2025
    Version      : 0.2
    Tested On    : Windows 11 24H2
    Requirements :
        - Admin rights for performing scan actions and accessing security settings.
        - .NET Framework (for WPF and Windows Forms integration).
        - PowerShell 7+ or newer to support the required cmdlets and graphical features.

    Compatibility: Windows 11 24H2 and above  
    This script is useful for IT specialists, system administrators, or advanced users who need to easily interact with and manage Windows Defender scans and system security.

    It can be extended to support additional scan types or integrate with other system tools for broader system diagnostics and cleanup.
#>

# Check if the script is running as Administrator
$runAsAdmin = (New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

# Load necessary assemblies for WPF and Windows Forms
Add-Type -AssemblyName PresentationFramework, PresentationCore, WindowsBase, System.Windows.Forms, System.Drawing

# Define the XAML layout for the UI (exact same as your WASAPI layout)
$xaml = @"
<Window xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'
        xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml'
        Title='Malware Diagnostic &amp; Cleanup Tool v0.2'
        Height='460' Width='460'
        ResizeMode='NoResize'
        WindowStartupLocation='CenterScreen'
        Background='#f4f4f4'
        FontFamily='Segoe UI'
        FontSize='12'
        SizeToContent='WidthAndHeight'>
    <Window.Resources>
        <Style TargetType='Button'>
            <Setter Property='Background' Value='#f4f4f4'/>
            <Setter Property='Foreground' Value='Black'/>
            <Setter Property='BorderBrush' Value='#cccccc'/>
            <Setter Property='BorderThickness' Value='1'/>
            <Setter Property='FontWeight' Value='Bold'/>
            <Setter Property='Cursor' Value='Hand'/>
            <Setter Property='Width' Value='400'/>
            <Setter Property='Height' Value='20'/>
            <Setter Property='Margin' Value='0,0,0,10'/>
        </Style>
    </Window.Resources>
    <StackPanel Margin='20' HorizontalAlignment='Center'>
        <TextBlock Text='Malware Diagnostic &amp; Cleanup Tool v0.2' FontSize='16' FontWeight='Bold' Margin='0,0,0,20' HorizontalAlignment='Center'/>
        
        <Button x:Name='StartQuickScanButton' Content='Start Quick Scan'/>
        <Button x:Name='GetScanStatusButton' Content='Get Scan Status'/>
        <Button x:Name='OpenWindowsSecurityButton' Content='Open Windows Security'/>
        <Button x:Name='UpdateDefinitionsButton' Content='Update Antivirus Definitions'/>
        <Button x:Name='RunFullScanButton' Content='Run Full Scan'/>
        <Button x:Name='ClearScanHistoryButton' Content='Clear Scan History'/>

        <ProgressBar x:Name='ProgressBar' Height='20' Width='400' Minimum='0' Maximum='100' Margin='0,5,0,5' Value='0'/>
        <TextBlock x:Name='StatusText' Text='Ready.' FontSize='12' Foreground='black'/>
        <TextBlock Text=" Allester Padovani, Senior IT Specialist. All rights reserved." FontSize="12" FontStyle="Italic" Foreground="black" Margin="0,20,0,0" HorizontalAlignment="Center"/>
    </StackPanel>
</Window>
"@

# Load XAML into a Window object
$xmlReader = [System.Xml.XmlReader]::Create([System.IO.StringReader]::new($xaml))
$window = [Windows.Markup.XamlReader]::Load($xmlReader)

# Get UI elements
$StartQuickScanButton = $window.FindName("StartQuickScanButton")
$GetScanStatusButton = $window.FindName("GetScanStatusButton")
$OpenWindowsSecurityButton = $window.FindName("OpenWindowsSecurityButton")
$UpdateDefinitionsButton = $window.FindName("UpdateDefinitionsButton")
$RunFullScanButton = $window.FindName("RunFullScanButton")
$ClearScanHistoryButton = $window.FindName("ClearScanHistoryButton")
$ProgressBar = $window.FindName("ProgressBar")
$StatusText = $window.FindName("StatusText")

# Helper function: update progress bar and status text
function Update-ProgressBar {
    param([int]$value, [string]$text)
    $ProgressBar.Value = $value
    $StatusText.Text = $text
    [System.Windows.Threading.Dispatcher]::CurrentDispatcher.Invoke([action]{}, [System.Windows.Threading.DispatcherPriority]::Background)
}

# Helper function: show results or info in message box
function Show-MessageBox {
    param(
        [string]$text,
        [string]$title = "Windows Defender Quick Scan"
    )
    Add-Type -AssemblyName System.Windows.Forms
    [System.Windows.Forms.MessageBox]::Show(
        $text,
        $title,
        [System.Windows.Forms.MessageBoxButtons]::OK,
        [System.Windows.Forms.MessageBoxIcon]::Information
    )
}

# Start Quick Scan button click event
$StartQuickScanButton.Add_Click({
    # Disable button during scan
    $StartQuickScanButton.IsEnabled = $false
    Update-ProgressBar -value 0 -text "Starting Quick Scan..."

    try {
        # Simulate initialization progress
        for ($i = 0; $i -le 10; $i += 2) {
            Update-ProgressBar -value $i -text "Initializing scan... $i%"
            Start-Sleep -Milliseconds 100
        }

        # Start Quick Scan
        Start-MpScan -ScanType QuickScan

        # Simulate scan progress
        for ($p = 10; $p -le 90; $p += 5) {
            Update-ProgressBar -value $p -text "Quick Scan in progress... $p%"
            Start-Sleep -Seconds 2
        }

        Update-ProgressBar -value 100 -text "Scan complete. Gathering results..."
        Start-Sleep -Seconds 2

        # Get scan status
        $scanStatus = Get-MpComputerStatus

        # Build report text
        $report = @"
Windows Defender Quick Scan Report

Real-Time Protection:    $($scanStatus.RealTimeProtectionEnabled)
Antivirus Enabled:       $($scanStatus.AntivirusEnabled)
Last Quick Scan Time:    $($scanStatus.QuickScanEndTime)
Last Full Scan Time:     $($scanStatus.FullScanEndTime)
Threats Detected:        $($scanStatus.DetectedThreats)
Signature Version:       $($scanStatus.AntivirusSignatureVersion)
Engine Version:          $($scanStatus.AntivirusEngineVersion)
"@

        Show-MessageBox -text $report -title "Quick Scan Complete"
        Update-ProgressBar -value 0 -text "Ready."
    }
    catch {
        Show-MessageBox -text "An error occurred during quick scan:`n$($_.Exception.Message)" -title "Error"
        Update-ProgressBar -value 0 -text "Ready."
    }
    finally {
        $StartQuickScanButton.IsEnabled = $true
    }
})

# Get Scan Status button click event
$GetScanStatusButton.Add_Click({
    try {
        $status = Get-MpComputerStatus
        $info = @"
Real-Time Protection:    $($status.RealTimeProtectionEnabled)
Antivirus Enabled:       $($status.AntivirusEnabled)
Threats Detected:        $($status.DetectedThreats)
Last Quick Scan Time:    $($status.QuickScanEndTime)
"@
        Show-MessageBox -text $info -title "Current Defender Status"
    }
    catch {
        Show-MessageBox -text "Failed to get scan status.`n$($_.Exception.Message)" -title "Error"
    }
})

# Open Windows Security app
$OpenWindowsSecurityButton.Add_Click({
    try {
        Start-Process "windowsdefender:"
        Update-ProgressBar -value 100 -text "Opened Windows Security."
    }
    catch {
        Update-ProgressBar -value 0 -text "Failed to open Windows Security."
    }
})

# Update Definitions button click event
$UpdateDefinitionsButton.Add_Click({
    try {
        Update-MpSignature
        Show-MessageBox -text "Antivirus definitions updated successfully." -title "Update Complete"
        Update-ProgressBar -value 100 -text "Definitions updated."
    }
    catch {
        Show-MessageBox -text "Failed to update definitions.`n$($_.Exception.Message)" -title "Error"
        Update-ProgressBar -value 0 -text "Ready."
    }
})

# Run Full Scan button click event
$RunFullScanButton.Add_Click({
    try {
        Start-MpScan -ScanType FullScan
        Show-MessageBox -text "Full Scan initiated. This may take a while." -title "Full Scan Started"
        Update-ProgressBar -value 0 -text "Ready."
    }
    catch {
        Show-MessageBox -text "Failed to start full scan.`n$($_.Exception.Message)" -title "Error"
    }
})

# Clear Scan History button click event
$ClearScanHistoryButton.Add_Click({
    try {
        Remove-Item -Path "$env:ProgramData\Microsoft\Windows Defender\Scans\History\*" -Recurse -Force -ErrorAction SilentlyContinue
        Show-MessageBox -text "Scan history cleared." -title "Done"
    }
    catch {
        Show-MessageBox -text "Failed to clear scan history.`n$($_.Exception.Message)" -title "Error"
    }
})

# Show the window
$window.ShowDialog() | Out-Null
