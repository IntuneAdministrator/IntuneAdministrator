<#
.SYNOPSIS
    Performs a Windows Defender Quick Scan with a responsive progress bar UI on Windows 11 24H2.

.DESCRIPTION
    This script initiates a Windows Defender Quick Scan and displays a WPF-based UI with a single button,
    progress bar, and status text to keep the user informed about scan progress.
    It simulates progress since Defender cmdlets do not provide real-time scan progress.
    After completion, it shows scan results.
    Requires running as Administrator.

.AUTHOR
    Author       : Allester Padovani
    Date         : July 16, 2025
    Version      : 1.1
    Tested On    : Windows 11 24H2

.VERSION
    1.0.0 - 2025-07-23 - Reduced UI with only Start Quick Scan button
#>

# Check if the script is running as Administrator
$runAsAdmin = (New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

# Load necessary assemblies for WPF
Add-Type -AssemblyName PresentationFramework, PresentationCore, WindowsBase

# Define the XAML layout for the UI with only one button
$xaml = @"
<Window xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'
        xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml'
        Title='Windows Defender Quick Scan'
        Height='300' Width='460'
        ResizeMode='NoResize'
        WindowStartupLocation='CenterScreen'
        Background='#f4f4f4'
        FontFamily='Segoe UI'
        FontSize='12'
        SizeToContent='WidthAndHeight'>
    <Window.Resources>
        <Style TargetType='Button'>
            <Setter Property='Background' Value='#f4f4f4'/>
            <Setter Property='Foreground' Value='Black'/>
            <Setter Property='BorderBrush' Value='#cccccc'/>
            <Setter Property='BorderThickness' Value='1'/>
            <Setter Property='FontWeight' Value='Bold'/>
            <Setter Property='Cursor' Value='Hand'/>
            <Setter Property='Width' Value='400'/>
            <Setter Property='Height' Value='20'/>
            <Setter Property='Margin' Value='0,0,0,10'/>
        </Style>
    </Window.Resources>
    <StackPanel Margin='20' HorizontalAlignment='Center'>
        <TextBlock Text='Windows Defender Quick Scan' FontSize='16' FontWeight='Bold' Margin='0,0,0,20' HorizontalAlignment='Center'/>

        <Button x:Name='StartQuickScanButton' Content='Start Quick Scan'/>

        <ProgressBar x:Name='ProgressBar' Height='20' Width='400' Minimum='0' Maximum='100' Margin='0,5,0,5' Value='0'/>
        <TextBlock x:Name='StatusText' Text='Ready.' FontSize='12' Foreground='black'/>
        <TextBlock Text="© Allester Padovani, Senior IT Specialist. All rights reserved." FontSize="12" FontStyle="Italic" Foreground="black" Margin="0,20,0,0" HorizontalAlignment="Center"/>
    </StackPanel>
</Window>
"@

# Load XAML into a Window object
$xmlReader = [System.Xml.XmlReader]::Create([System.IO.StringReader]::new($xaml))
$window = [Windows.Markup.XamlReader]::Load($xmlReader)

# Find UI elements
$StartQuickScanButton = $window.FindName("StartQuickScanButton")
$ProgressBar = $window.FindName("ProgressBar")
$StatusText = $window.FindName("StatusText")

# Helper function to update UI safely
function Update-UI {
    [System.Windows.Threading.Dispatcher]::CurrentDispatcher.Invoke([action]{}, [System.Windows.Threading.DispatcherPriority]::Background)
}

# Function to update progress bar and status text
function Update-Progress {
    param(
        [int]$percent,
        [string]$message
    )
    $ProgressBar.Value = $percent
    $StatusText.Text = $message
    Update-UI
}

# Function to check for admin rights
function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Start Quick Scan button click handler
$StartQuickScanButton.Add_Click({
    if (-not (Test-Admin)) {
        [System.Windows.MessageBox]::Show("Please run the script as Administrator to start the scan.","Admin Rights Required",[System.Windows.MessageBoxButton]::OK,[System.Windows.MessageBoxImage]::Warning)
        return
    }

    try {
        # Reset progress bar
        Update-Progress -percent 0 -message "Starting Quick Scan..."

        # Simulate initialization
        for ($i = 0; $i -le 10; $i += 2) {
            Update-Progress -percent $i -message "Initializing scan... $i%"
            Start-Sleep -Milliseconds 150
        }

        # Start Defender Quick Scan asynchronously
        Start-Job -ScriptBlock { Start-MpScan -ScanType QuickScan } | Out-Null

        # Simulate scan progress since real progress is not available
        for ($p = 10; $p -le 90; $p += 5) {
            Update-Progress -percent $p -message "Quick Scan in progress... $p%"
            Start-Sleep -Seconds 2
        }

        Update-Progress -percent 100 -message "Scan complete. Gathering results..."
        Start-Sleep -Seconds 2

        # Retrieve scan status
        $scanStatus = Get-MpComputerStatus

        # Build report string
        $report = @"
Windows Defender Quick Scan Report

Real-Time Protection:    $($scanStatus.RealTimeProtectionEnabled)
Antivirus Enabled:       $($scanStatus.AntivirusEnabled)
Last Quick Scan Time:    $($scanStatus.QuickScanEndTime)
Last Full Scan Time:     $($scanStatus.FullScanEndTime)
Threats Detected:        $($scanStatus.DetectedThreats)
Signature Version:       $($scanStatus.AntivirusSignatureVersion)
Engine Version:          $($scanStatus.AntivirusEngineVersion)
"@

        [System.Windows.MessageBox]::Show($report, "Quick Scan Complete", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
        Update-Progress -percent 0 -message "Ready."
    }
    catch {
        [System.Windows.MessageBox]::Show("Error during quick scan:`n$($_.Exception.Message)", "Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
        Update-Progress -percent 0 -message "Ready."
    }
})

# Show the window
$window.ShowDialog() | Out-Null
