<#
.SYNOPSIS
    Initiates a full scan using Windows Defender and displays a progress bar with real-time status updates.
.DESCRIPTION
    This PowerShell script launches a full system scan using Windows Defender, displaying a WPF-based graphical interface with a progress bar. The user is prompted to ensure the script is being run with Administrator privileges. Once started, the script simulates the progress of the scan and provides real-time updates on its status, such as "Initializing scan," "Scan in progress," and "Scan completed." After completion, the script shows a summary of the Defender scan results.
.NOTES
    Author       : Allester Padovani
    Date         : July 16, 2025
    Version      : 1.1
    Tested On    : Windows 11 24H2
    Requirements :
        - Admin rights to run a full scan with Windows Defender.
        - .NET Framework (for WPF and WinForms)
        - PowerShell 7+ or newer
    Compatibility: Windows 11 24H2 and above
    This tool is useful for troubleshooting security-related issues and monitoring system health.
#>

# Check if the script is running as Administrator
$runAsAdmin = (New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

if (-not $runAsAdmin) {
    # Relaunch the script as administrator if not running with elevated privileges
    $argList = $MyInvocation.MyCommand.Definition
    Start-Process powershell -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$argList`"" -Verb RunAs
    exit
}

# Load necessary assemblies
Add-Type -AssemblyName PresentationFramework, PresentationCore, WindowsBase

# Define XAML layout
$xaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Windows Defender Full Scan"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen"
        Background="#f4f4f4"
        FontFamily="Segoe UI"
        FontSize="12"
        SizeToContent="WidthAndHeight">
    <Window.Resources>
        <Style TargetType="Button">
            <Setter Property="Background" Value="#f4f4f4"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderBrush" Value="#cccccc"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Width" Value="400"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Margin" Value="0,0,0,10"/>
        </Style>
    </Window.Resources>
    <StackPanel Margin="20" HorizontalAlignment="Center">
        <TextBlock Text="Windows Defender Full Scan" FontSize="16" FontWeight="Bold" Margin="0,0,0,20" HorizontalAlignment="Center"/>
        <Button x:Name="StartScanButton" Content="Start Full Scan"/>
        <ProgressBar x:Name="ProgressBar" Height="20" Width="400" Minimum="0" Maximum="100" Margin="0,5,0,5" Value="0"/>
        <TextBlock x:Name="StatusText" Text="Ready." FontSize="12" Foreground="black"/>
        <TextBlock Text="© Allester Padovani, Senior IT Specialist. All rights reserved." FontSize="12" FontStyle="Italic" Foreground="black" Margin="0,20,0,0" HorizontalAlignment="Center"/>
    </StackPanel>
</Window>
"@

# Load XAML
try {
    $reader = [System.Xml.XmlReader]::Create([System.IO.StringReader]::new($xaml))
    $window = [Windows.Markup.XamlReader]::Load($reader)
}
catch {
    Show-MessageBox -Message "Failed to load XAML layout. Error: $($_.Exception.Message)" -Title "Error"
    exit
}

# Find named elements
$StartScanButton = $window.FindName("StartScanButton")
$ProgressBar = $window.FindName("ProgressBar")
$StatusText = $window.FindName("StatusText")

# Function to update UI
function Update-UI {
    [System.Windows.Forms.Application]::DoEvents()
}

# Function to show message box
function Show-MessageBox {
    param (
        [string]$Message,
        [string]$Title = "Windows Defender"
    )
    [System.Windows.MessageBox]::Show($Message, $Title, 'OK', 'Information') | Out-Null
}

# Scan logic
$StartScanButton.Add_Click({
    try {
        # Ensure Defender module is available
        if (-not (Get-Command Start-MpScan -ErrorAction SilentlyContinue)) {
            Show-MessageBox -Message "Windows Defender cmdlets are not available. Please ensure Windows Defender is enabled." -Title "Error"
            return
        }

        Import-Module Defender -ErrorAction Stop

        Show-MessageBox -Message "The full scan may take several minutes. Do not close this window." -Title "Scan Starting"
        $ProgressBar.Value = 0
        $StatusText.Text = "Initializing scan..."
        Update-UI

        # Fake progress - simulate 0–10%
        for ($i = 0; $i -le 10; $i += 2) {
            $ProgressBar.Value = $i
            $StatusText.Text = "Starting scan... $i%"
            Update-UI
            Start-Sleep -Milliseconds 100
        }

        # Start full scan
        Start-MpScan -ScanType Full

        # Simulated scan progress
        for ($i = 15; $i -le 90; $i += 5) {
            $ProgressBar.Value = $i
            $StatusText.Text = "Scan in progress... $i%"
            Update-UI
            Start-Sleep -Seconds 3
        }

        $ProgressBar.Value = 100
        $StatusText.Text = "Scan finished. Getting results..."
        Update-UI

        # Get the scan status
        $status = Get-MpComputerStatus

        # Display the scan results
        $summary = @"
Scan Completed

Real-time Protection:     $($status.RealTimeProtectionEnabled)
Threats Detected:         $($status.ThreatsDetected)
Last Scan Time:           $($status.LastScanTime)
Last Scan Type:           $($status.LastScanType)
Days Since Last Full Scan:$($status.FullScanAge)
"@

        Show-MessageBox -Message $summary -Title "Defender Scan Summary"
        $StatusText.Text = "Scan complete."
        $ProgressBar.Value = 100
    }
    catch {
        Show-MessageBox -Message "An error occurred: $($_.Exception.Message)" -Title "Scan Error"
        $StatusText.Text = "Scan failed."
    }
})

# Show the window
$window.ShowDialog() | Out-Null
