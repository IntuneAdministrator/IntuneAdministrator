<#
.SYNOPSIS
    Provides a GUI for running a Windows Defender quick scan with progress feedback.

.DESCRIPTION
    Displays a compact Windows Forms window showing scan progress and status messages.
    Checks if the Windows Defender service is running and starts it if necessary.
    Runs the Defender quick scan asynchronously to keep the UI responsive.
    Updates a progress bar and status label during the scan.
    Shows a completion or error message upon finishing.
    Handles errors gracefully and closes the GUI properly.

.AUTHOR
    Name        : Allester Padovani
    Title       : Senior IT Specialist
    Date        : 2025-07-16
    Version     : 1.0

.NOTES
    Compatibility: Windows 11 24H2 and above  
    Requires     : Windows Defender service, Defender PowerShell module, .NET Framework for Windows Forms
#>

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Create form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Windows Defender Quick Scan"
$form.Size = New-Object System.Drawing.Size(520, 150)
$form.StartPosition = "CenterScreen"
$form.TopMost = $true
$form.FormBorderStyle = 'FixedDialog'
$form.MaximizeBox = $false
$form.MinimizeBox = $false

# Status label
$statusLabel = New-Object System.Windows.Forms.Label
$statusLabel.Location = New-Object System.Drawing.Point(15, 15)
$statusLabel.Size = New-Object System.Drawing.Size(480, 40)
$statusLabel.Font = New-Object System.Drawing.Font("Segoe UI", 10)
$statusLabel.Text = "Preparing scan..."
$form.Controls.Add($statusLabel)

# Progress bar
$progressBar = New-Object System.Windows.Forms.ProgressBar
$progressBar.Location = New-Object System.Drawing.Point(15, 65)
$progressBar.Size = New-Object System.Drawing.Size(480, 30)
$progressBar.Minimum = 0
$progressBar.Maximum = 100
$progressBar.Style = [System.Windows.Forms.ProgressBarStyle]::Continuous
$form.Controls.Add($progressBar)

# Show form non-blocking
$form.Show()
[System.Windows.Forms.Application]::DoEvents()

function Update-UI {
    param (
        [string]$Message,
        [int]$PercentComplete = $null
    )
    $statusLabel.Text = $Message
    if ($PercentComplete -ne $null) {
        $progressBar.Value = [Math]::Min([Math]::Max($PercentComplete, 0), 100)
    }
    [System.Windows.Forms.Application]::DoEvents()
}

try {
    # Check Defender service
    $defender = Get-Service -Name "WinDefend" -ErrorAction Stop
    if ($defender.Status -ne "Running") {
        Update-UI "Starting Windows Defender service..." 0
        Start-Service -Name "WinDefend" -ErrorAction Stop
    } else {
        Update-UI "Windows Defender is running." 0
    }

    if (-not (Get-Command -Name "Start-MpScan" -ErrorAction SilentlyContinue)) {
        throw "Start-MpScan cmdlet not found. Ensure Windows Defender module is available."
    }

    # Start Defender quick scan as a background job
    $job = Start-Job -ScriptBlock {
        Import-Module Defender
        Start-MpScan -ScanType QuickScan
    }

    # Simulate progress from 1% to 100%
    for ($i = 1; $i -le 100; $i++) {
        if ($job.State -ne 'Running') { break }
        Update-UI "Scanning in progress... $i`%" $i
        Start-Sleep -Milliseconds 100
    }

    # Wait for job to finish
    Wait-Job -Job $job
    Receive-Job -Job $job | Out-Null
    Remove-Job -Job $job

    Update-UI "Scan completed." 100
    Start-Sleep -Seconds 1
    $form.Close()

    # Completion message
    [System.Windows.Forms.MessageBox]::Show(
        'Windows Defender quick scan has been completed successfully.',
        'Scan Complete',
        [System.Windows.Forms.MessageBoxButtons]::OK,
        [System.Windows.Forms.MessageBoxIcon]::Information
    )
}
catch {
    Update-UI "An error occurred: $_" 100
    Start-Sleep -Seconds 3
    if ($form -and $form.Visible) { $form.Close() }
    [System.Windows.Forms.MessageBox]::Show(
        "An error occurred: $_",
        'Error',
        [System.Windows.Forms.MessageBoxButtons]::OK,
        [System.Windows.Forms.MessageBoxIcon]::Error
    )
    exit 1
}

Write-Host "Script finished." -ForegroundColor Green
exit
